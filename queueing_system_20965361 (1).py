# -*- coding: utf-8 -*-
"""Queueing System_20965361.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNwNU6BZcslTu77NRilLgYslv8qHlz13
"""

#Yeung Pok 20965361
import random
import numpy as np

class Customer:
    def __init__(self):
        self.phone_number = random.randint(100000, 999999)  # Unique 6-digit integer
        self.number_of_pax = random.randint(1, 7)  # Number of pax between 1 and 7

    def __repr__(self):
        return f"(Phone: {self.phone_number}, Pax: {self.number_of_pax})"


class Kiosk:
    def __init__(self):
        self.queue = []  # List to hold customers in queue

    def add_customer(self, customer):
        self.queue.append(customer)

    def process_customer(self):
        # Process one customer only if there are more than one in the queue
        if len(self.queue) > 1:
            self.queue.pop(0)  # Process the first customer

    def queue_length(self):
        return len(self.queue)

    def __repr__(self):
        return f"Queue Length: {self.queue_length()}, Customers: {self.queue}"


class QueueSystem:
    def __init__(self):
        self.kiosks = [Kiosk(), Kiosk()]

    def assign_customer(self, customer):
        # Assign to the kiosk with the shortest queue
        if self.kiosks[0].queue_length() <= self.kiosks[1].queue_length():
            self.kiosks[0].add_customer(customer)
        else:
            self.kiosks[1].add_customer(customer)

    def process_kiosks(self):
        for kiosk in self.kiosks:
            kiosk.process_customer()  # Process one customer from each kiosk

    def display_state(self, minute, customers_arrived):
        print(f"Minute {minute + 1}:")
        print(f"{customers_arrived} customers arrived.\n")
        for i, kiosk in enumerate(self.kiosks, start=1):
            customers = kiosk.queue
            if customers:  # Only display if there are customers
                customers_info = ', '.join(str(customer) for customer in customers)
                print(f"Kiosk {i} Queue Length: {kiosk.queue_length()}, Customers: [{customers_info}]")
            else:
                print(f"Kiosk {i} Queue Length: {kiosk.queue_length()}, Customers: []")  # Show empty but without customers
        print()  # Blank line for better readability


def simulate_queue_system():
    queue_system = QueueSystem()
    total_minutes = 15

    for minute in range(total_minutes):
        # Simulating customer arrival using Poisson distribution
        customers_arrived = np.random.poisson(2)  # Î» = 2 customers per minute

        # Add new customers to the kiosks
        for _ in range(customers_arrived):
            customer = Customer()
            queue_system.assign_customer(customer)

        # Display the state of the kiosks before processing customers
        queue_system.display_state(minute, customers_arrived)

        # Process customers in kiosks after displaying the state
        queue_system.process_kiosks()  # Process customers in kiosks


if __name__ == "__main__":
    simulate_queue_system()